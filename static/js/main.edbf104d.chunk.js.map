{"version":3,"sources":["BugList.js","App.js","serviceWorker.js","index.js"],"names":["BugList","props","state","items","text","name","dropdownOptions","dropdownVariants","dates","handleChange","bind","handleSubmit","dropdownSelect","Table","striped","bordered","hover","this","map","item","index","key","toString","slice","DropdownButton","id","title","variant","Dropdown","Item","onClick","Button","type","onSubmit","htmlFor","onChange","value","style","width","height","required","marginLeft","marginBottom","marginTop","e","target","setState","console","log","length","splice","preventDefault","newItem","Date","now","concat","selection","innerHTML","selectionId","includes","arrO","arrV","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edbf104d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nclass BugList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n    \titems: [], \r\n    \ttext: '', \r\n    \tname: '', \r\n    \tdropdownOptions: [], \r\n    \tdropdownVariants: [],\r\n    \tdates: []\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.dropdownSelect = this.dropdownSelect.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Bug Tracker</h3>\r\n        <Table striped bordered hover>\r\n\t      <thead>\r\n\t\t    <tr>\r\n\t\t      <th>#</th>\r\n\t\t      <th>Bug details</th>\r\n\t\t      <th>Reported by</th>\r\n\t\t      <th>Date</th>\r\n\t\t      <th>Status</th>\r\n\t\t   \r\n\t\t    </tr>\r\n\t\t  </thead>\r\n\t\t  <tbody>\r\n\t       {this.state.items.map((item,index) => \r\n\t     \t<tr key={index}>\r\n\t     \t<td>{index+1}</td>\r\n\t     \t<td>{item.text}</td>\r\n\t     \t<td>{item.name}</td>\r\n\t     \t<td>{this.state.dates[index].toString().slice(0, 25)}</td>\r\n\t     \t<td><DropdownButton id=\"status-dropdown\" \r\n\t     \t\ttitle={this.state.dropdownOptions[index]} variant={this.state.dropdownVariants[index]} >\r\n\t  \t\t\t<Dropdown.Item id={index} onClick={this.dropdownSelect}>Unresolved</Dropdown.Item>\r\n\t  \t\t\t<Dropdown.Item id={index} onClick={this.dropdownSelect}>In progress</Dropdown.Item>\r\n\t  \t\t\t<Dropdown.Item id={index} onClick={this.dropdownSelect}>Resolved</Dropdown.Item>\r\n\t\t\t\t</DropdownButton></td>\r\n\t\t\t<td><Button id={index} variant=\"danger\" type=\"button\" onClick={this.handleChange}>\r\n\t            Remove\r\n\t          </Button></td>\r\n\t     \t</tr> \r\n\t       )}\r\n\r\n\t        \r\n\t      </tbody>\r\n\t      </Table>\r\n        <br />\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"new-todo\">\r\n            Would you like to report a bug? Please describe the issue below.  \r\n          </label>\r\n          <br />\r\n          <textarea\r\n            id=\"new-todo\"\r\n            onChange={this.handleChange}\r\n            value={this.state.text} style={{width: 300 + 'px', height: 100 + 'px'}}\r\n            required\r\n          />\r\n          <br />\r\n          <br />\r\n          Your Name: &nbsp; &nbsp;\r\n          <input \r\n           id=\"name\"\r\n           onChange={this.handleChange}\r\n           value={this.state.name}\r\n           required\r\n          />\r\n          <br />\r\n          <Button variant=\"primary\" type=\"submit\" \r\n            style={{marginLeft: 10 + 'px', marginBottom: 8 + 'px', marginTop: 15 + 'px'}}>\r\n            Report Bug\r\n          </Button>\r\n        </form>\r\n\t      \r\n\t    </div>\r\n    );\r\n  }\r\n  handleChange(e) {\r\n  \tif (e.target.id === \"new-todo\") {\r\n    \tthis.setState({ text: e.target.value });\r\n\t} else if (e.target.id === \"name\") {\r\n\t\tthis.setState({ name: e.target.value });\r\n\t} else if (e.target.type === \"button\") {\r\n\t\tconsole.log(e.target.id);\r\n\t\tconst index = e.target.id;\r\n\t\tif (this.state.items.length <= 1) {\r\n\t\t\tthis.setState(state => ({\r\n\t\t      items: [],\r\n\t\t      text: '',\r\n\t\t      name: '',\r\n\t\t      dropdownOptions: [],\r\n\t\t      dropdownVariants: [],\r\n\t\t      dates: []\r\n\t\t    }));\r\n\t\t} else {\r\n\t\t\tthis.state.items.splice(index, 1);\r\n\t\t\tthis.state.dropdownOptions.splice(index, 1);\r\n\t\t\tthis.state.dropdownVariants.splice(index, 1);\r\n\t\t\tthis.state.dates.splice(index, 1);\r\n\t\t\tthis.setState(state => ({\r\n\t\t      items: this.state.items,\r\n\t\t      dropdownOptions: this.state.dropdownOptions,\r\n\t\t      dropdownVariants: this.state.dropdownVariants,\r\n\t\t      dates: this.state.dates\r\n\t\t    }));\r\n\t\t}\r\n\t}\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!this.state.text.length) {\r\n      return;\r\n    }\r\n    const newItem = {\r\n      text: this.state.text,\r\n      id: Date.now(),\r\n      name: this.state.name,\r\n    };\r\n    this.setState(state => ({\r\n      items: state.items.concat(newItem),\r\n      text: '',\r\n      name: '',\r\n      dropdownOptions: state.dropdownOptions.concat(\"Unresolved\"),\r\n      dropdownVariants: state.dropdownVariants.concat(\"warning\"),\r\n      dates: state.dates.concat(Date(Date.now()))\r\n    }));\r\n  }\r\n\r\n  dropdownSelect(e) {\r\n  \tconst selection = e.target.innerHTML;\r\n  \tconst selectionId = e.target.id;\r\n\tif (selection.includes(\"Unresolved\")) {\r\n\t\tconsole.log('a');\r\n\t\tlet arrO = this.state.dropdownOptions;\r\n\t\tlet arrV = this.state.dropdownVariants;\r\n\t\tarrO[selectionId] = \"Unresolved\";\r\n\t\tarrV[selectionId] = \"warning\";\r\n\t\tthis.setState(state => ({\r\n\t\t      dropdownOptions: arrO,\r\n\t\t      dropdownVariants: arrV\r\n\t\t}));\r\n  \t} else if (selection.includes(\"In progress\")) {\r\n  \t\tconsole.log('b');\r\n  \t\tlet arrO = this.state.dropdownOptions;\r\n\t\tlet arrV = this.state.dropdownVariants;\r\n  \t\tarrO[selectionId] = \"In progress\";\r\n  \t\tarrV[selectionId] = \"primary\";\r\n\t\tthis.setState(state => ({\r\n\t\t      dropdownOptions: arrO,\r\n\t\t      dropdownVariants: arrV\r\n\t\t}));\r\n  \t} else if (selection.includes(\"Resolved\")) {\r\n  \t\tconsole.log('c');\r\n  \t\tlet arrO = this.state.dropdownOptions;\r\n\t\tlet arrV = this.state.dropdownVariants;\r\n  \t\tarrO[selectionId] = \"Resolved\";\r\n  \t\tarrV[selectionId] = \"success\";\r\n\t\tthis.setState(state => ({\r\n\t\t      dropdownOptions: arrO,\r\n\t\t      dropdownVariants: arrV\r\n\t\t}));\r\n  \t}\r\n  }\r\n}\r\nexport default BugList;","import React from 'react';\nimport BugList from './BugList';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BugList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}